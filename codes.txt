import 'dart:async';
import 'dart:developer';
import 'package:buzzflix/video_player/api_vimeo_model.dart' as model;
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:subtitle_wrapper_package/subtitle_controller.dart';
import 'package:subtitle_wrapper_package/subtitle_wrapper.dart';
import 'package:video_player/video_player.dart';
import 'package:http/http.dart' as http;

enum VideoOptions { speed, subtitle, quality, share, report }

class MainVideoPlayer extends StatefulWidget {
  final int id;

  const MainVideoPlayer({Key? key, required this.id}) : super(key: key);

  @override
  State<MainVideoPlayer> createState() => _MainVideoPlayerState();
}

class _MainVideoPlayerState extends State<MainVideoPlayer> {
  late VideoPlayerController _videoPlayerController;
  late List<model.Download> data;
  late model.Download selected;
  late List<model.Datum> subtitles;
  model.Datum? selectedSubtitle;
  late SubtitleController subtitleController;
  bool isLoading = true;
  bool _showControls = true;
  bool _isFullScreen = false;
  Timer? _timer;
  bool showSub = false;

  @override
  void initState() {
    super.initState();
    init();
  }

  Future<void> init() async {
    final apiModel = await VimeoApi.call(videoId: widget.id);
    final subtitles = await VimeoApi.caption(videoId: widget.id);
    updateData(apiModel);
    updateCaption(subtitles);
    initCaption();
    await initializePlayer();
    setState(() {
      isLoading = false;
    });
  }

  void updateData(model.ApiVimeoModel apiModel) {
    data = apiModel.files;
    selected = data.firstWhere((element) => element.rendition == "adaptive");
    data.removeWhere((element) => element.rendition == "adaptive");
    data.sort((a, b) => ((a.size > b.size) ? 1 : -1));
  }

  void updateCaption(model.CaptionVimeoModel apiModel) {
    subtitles = apiModel.data;
  }

  void changeCaption(model.Datum selected, bool show) {
    subtitleController = SubtitleController(
      subtitleUrl: selected.link,
      subtitleType: SubtitleType.webvtt,
      showSubtitles: show,
    );
  }

  void initCaption() {
    subtitleController = SubtitleController(showSubtitles: false);
  }

  Future<void> initializePlayer() async {
    _videoPlayerController = VideoPlayerController.network(
      selected.link,
      // closedCaptionFile: ,
    );
    await _videoPlayerController.initialize();
    _videoPlayerController.setLooping(false);
    _videoPlayerController.play();
  }

  void showQualitySelectionSheet(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return SimpleDialog(
          title: const Text('Choose Quality'),
          children: data.map((video) {
            return SimpleDialogOption(
              onPressed: () {
                onChangeQuality(context, download: video);
                Navigator.pop(context);
              },
              child: Text(
                "${video.rendition} (${video.quality?.toUpperCase()})",
                style: const TextStyle(
                  fontSize: 18,
                ),
              ),
            );
          }).toList(),
        );
      },
    );
  }

  void showSubtitleSelectionSheet(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return SimpleDialog(
          title: const Text('Subtitle'),
          children: subtitles.map((sub) {
            return SimpleDialogOption(
              onPressed: () {
                setState(() {
                  selectedSubtitle = sub;
                  bool same = (selectedSubtitle == sub);
                  changeCaption(sub, !same);
                  Navigator.pop(context);
                });
              },
              child: Text(
                "${sub.displayLanguage} (${sub.language})",
                style: const TextStyle(
                  fontSize: 18,
                ),
              ),
            );
          }).toList(),
        );
      },
    );
  }

  Future<void> onChangeQuality(
    BuildContext context, {
    required model.Download download,
  }) async {
    final currentPosition = _videoPlayerController.value.position;
    _videoPlayerController = VideoPlayerController.network(download.link);
    await _videoPlayerController.initialize().then((_) {
      _videoPlayerController.seekTo(currentPosition);
      _videoPlayerController.setLooping(false);
      _videoPlayerController.play();
      Navigator.pop(context);
      setState(() {});
    });
  }

  void _handleOptionSelection(VideoOptions option) {
    switch (option) {
      case VideoOptions.speed:
        _showSpeedChangeDialog(context);
        break;
      case VideoOptions.subtitle:
        showSubtitleSelectionSheet(context);
        break;
      case VideoOptions.quality:
        showQualitySelectionSheet(context);
        break;
      case VideoOptions.share:
        // Handle share
        break;
      case VideoOptions.report:
        // Handle report
        break;
    }
  }

  List<Map<String, dynamic>> speeds = [
    {'label': 'Slower', 'value': 0.5},
    {'label': 'Slow', 'value': 0.75},
    {'label': 'Normal', 'value': 1.0},
    {'label': 'Fast', 'value': 1.5},
    {'label': 'Faster', 'value': 2.0},
  ];

  double currentSpeed = 1.0; // Initially set to 'Normal' speed

  void _showSpeedChangeDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Change Speed'),
          content: SizedBox(
            height: 150.0, // Change as per your requirement
            width: 300.0, // Change as per your requirement
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: speeds.length,
              itemBuilder: (BuildContext context, int index) {
                return ListTile(
                  title: Text("x${speeds[index]["value"]} ${speeds[index]['label']}"),
                  trailing: speeds[index]['value'] == currentSpeed
                      ? const Icon(Icons.check) // Show check icon for current speed
                      : null,
                  onTap: () {
                    setState(() {
                      currentSpeed = speeds[index]['value'];
                      _videoPlayerController.setPlaybackSpeed(currentSpeed);
                      _videoPlayerController.play();
                    });
                    Navigator.of(context).pop();
                  },
                );
              },
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return const Center(child: CircularProgressIndicator());
    } else {
      return Scaffold(
        backgroundColor: Colors.black,
        body: GestureDetector(
          behavior: HitTestBehavior.deferToChild,
          onTap: _toggleControls,
          onPanUpdate: (details) => _resetTimer(),
          child: _videoPlayerController.value.isInitialized
              ? Stack(
                  alignment: Alignment.center,
                  children: [
                    AspectRatio(
                      aspectRatio: _videoPlayerController.value.aspectRatio,
                      child: SubtitleWrapper(
                        videoPlayerController: _videoPlayerController,
                        subtitleController: subtitleController,
                        videoChild: VideoPlayer(_videoPlayerController),
                      ),
                    ),
                    AnimatedOpacity(
                      opacity: _showControls ? 1.0 : 0.0,
                      duration: const Duration(milliseconds: 300),
                      child: _buildControls(context),
                    ),
                  ],
                )
              : Container(),
        ),
      );
    }
  }

  Stack _buildControls(BuildContext context) {
    return Stack(
      children: [
        VideoOverlay(
          _videoPlayerController,
          () => setState(() {
            _showControls = true;
          }),
          _resetTimer,
        ),
        Positioned(
          bottom: 10,
          right: 5,
          left: 5,
          child: SafeArea(
            child: ControlsRow(
              _videoPlayerController,
              _toggleFullScreen,
              _isFullScreen,
            ),
          ),
        ),
        Positioned(
          top: 10,
          right: 5.0,
          child: SafeArea(
            child: PopupMenuButton<VideoOptions>(
              color: Colors.transparent,
              onSelected: (VideoOptions result) {
                setState(() {
                  _handleOptionSelection(result);
                });
              },
              onOpened: () {
                setState(() {
                  _videoPlayerController.pause();
                  _showControls = false;
                });
              },
              onCanceled: () {
                setState(() {
                  _videoPlayerController.play();
                });
              },
              elevation: 0,
              surfaceTintColor: Colors.transparent,
              itemBuilder: (BuildContext context) => <PopupMenuEntry<VideoOptions>>[
                PopupMenuItem<VideoOptions>(
                  value: VideoOptions.speed,
                  child: Text(
                    'Change Speed',
                    style: TextStyle(
                      color: Colors.white.withOpacity(0.7),
                    ),
                  ),
                ),
                PopupMenuItem<VideoOptions>(
                  value: VideoOptions.subtitle,
                  child: Text(
                    'Audio & Subtitle',
                    textAlign: TextAlign.right,
                    style: TextStyle(
                      color: Colors.white.withOpacity(0.7),
                    ),
                  ),
                ),
                PopupMenuItem<VideoOptions>(
                  value: VideoOptions.quality,
                  child: Text(
                    'Video Quality',
                    textAlign: TextAlign.right,
                    style: TextStyle(
                      color: Colors.white.withOpacity(0.7),
                    ),
                  ),
                ),
                PopupMenuItem<VideoOptions>(
                  value: VideoOptions.share,
                  child: Text(
                    'Share',
                    style: TextStyle(
                      color: Colors.white.withOpacity(0.7),
                    ),
                  ),
                ),
                PopupMenuItem<VideoOptions>(
                  value: VideoOptions.report,
                  child: Text(
                    'Report',
                    style: TextStyle(
                      color: Colors.white.withOpacity(0.7),
                    ),
                  ),
                ),
              ],
              child: Container(
                padding: const EdgeInsets.all(5),
                child: const Icon(
                  Icons.more_vert,
                  color: Colors.white,
                  size: 25,
                ),
              ),
            ),
          ),
        ),
      ],
    );
  }

  void _toggleControls() {
    setState(() {
      _showControls = !_showControls;
      if (_showControls) {
        _startTimer();
      } else {
        _timer?.cancel();
      }
    });
  }

  void _startTimer() {
    _timer?.cancel();
    _timer = Timer(const Duration(seconds: 5), () {
      setState(() {
        _showControls = false;
      });
    });
  }

  void _resetTimer() {
    if (!_showControls) return;
    _startTimer();
  }

  void _toggleFullScreen() {
    setState(() {
      _isFullScreen = !_isFullScreen;
      if (_isFullScreen) {
        SystemChrome.setPreferredOrientations([
          DeviceOrientation.landscapeLeft,
          DeviceOrientation.landscapeRight,
        ]);
      } else {
        SystemChrome.setPreferredOrientations([
          DeviceOrientation.portraitUp,
          DeviceOrientation.portraitDown,
        ]);
      }
    });
  }

  @override
  void dispose() {
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
    _videoPlayerController.dispose();
    super.dispose();
  }
}

class VimeoApi {
  static Future<model.ApiVimeoModel> call({required int videoId}) async {
    final url = 'https://api.vimeo.com/videos/$videoId';
    final response = await http.get(Uri.parse(url), headers: {
      'Authorization': 'Bearer dec7909b74b589f034c71f1575f5e477',
    });
    log(response.body, name: "Download Api");
    if (response.statusCode == 200) {
      return model.apiVimeoModelFromJson(response.body);
    } else {
      throw Exception('Failed to load video');
    }
  }

  static Future<model.CaptionVimeoModel> caption({required int videoId}) async {
    final url = 'https://api.vimeo.com/videos/$videoId/texttracks';
    final response = await http.get(Uri.parse(url), headers: {
      'Authorization': 'Bearer dec7909b74b589f034c71f1575f5e477',
    });
    log(response.body, name: "Download Api");
    if (response.statusCode == 200) {
      return model.captionVimeoModelFromJson(response.body);
    } else {
      throw Exception('Failed to load video');
    }
  }
}

class VideoOverlay extends StatelessWidget {
  final VideoPlayerController _videoPlayerController;
  final VoidCallback refreshParent;
  final VoidCallback resetTimer;

  const VideoOverlay(
    this._videoPlayerController,
    this.refreshParent,
    this.resetTimer, {
    super.key,
  });

  void forwardVideo() {
    final duration = _videoPlayerController.value.position + const Duration(seconds: 10);
    _videoPlayerController.seekTo(duration);
  }

  void rewindVideo() {
    final duration = _videoPlayerController.value.position - const Duration(seconds: 10);
    _videoPlayerController.seekTo(duration);
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.black.withOpacity(0.6),
      child: Center(
        child: Row(
          children: [
            Expanded(
              child: GestureDetector(
                behavior: HitTestBehavior.deferToChild,
                onDoubleTap: () {
                  rewindVideo();
                  refreshParent();
                },
                child: Container(color: Colors.transparent),
              ),
            ),
            Expanded(
              child: GestureDetector(
                behavior: HitTestBehavior.deferToChild,
                onTap: () {
                  if (_videoPlayerController.value.isPlaying) {
                    _videoPlayerController.pause();
                  } else {
                    _videoPlayerController.play();
                  }
                  resetTimer();
                  refreshParent();
                },
                onDoubleTap: () {
                  // Add your forwardVideo logic here
                  forwardVideo();
                  resetTimer();
                  refreshParent();
                },
                child: Icon(
                  _videoPlayerController.value.isPlaying ? Icons.pause : Icons.play_arrow,
                  color: Colors.white,
                  size: 48.0,
                ),
              ),
            ),
            Expanded(
              child: GestureDetector(
                behavior: HitTestBehavior.deferToChild,
                onDoubleTap: () {
                  forwardVideo();
                  refreshParent();
                },
                child: Container(color: Colors.transparent),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class ControlsRow extends StatefulWidget {
  final VideoPlayerController _videoPlayerController;
  final VoidCallback _toggleFullScreen;
  final bool _isFullScreen;

  const ControlsRow(
    this._videoPlayerController,
    this._toggleFullScreen,
    this._isFullScreen, {
    super.key,
  });

  @override
  State<ControlsRow> createState() => _ControlsRowState();
}

class _ControlsRowState extends State<ControlsRow> {
  @override
  Widget build(BuildContext context) {
    final position = widget._videoPlayerController.value.position;
    final duration = widget._videoPlayerController.value.duration;

    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 5.0),
          child: TimeText(widget._videoPlayerController),
        ),
        Row(
          children: [
            Expanded(
              child: SliderTheme(
                data: SliderTheme.of(context).copyWith(
                  activeTrackColor: Colors.red,
                  inactiveTrackColor: Colors.white.withOpacity(0.5),
                  trackHeight: 3.0,
                  thumbColor: Colors.red,
                  thumbShape: const RoundSliderThumbShape(enabledThumbRadius: 5.0),
                  overlayColor: Colors.red.withOpacity(0.3),
                  overlayShape: const RoundSliderOverlayShape(overlayRadius: 10.0),
                ),
                child: Slider(
                  value: position.inSeconds.toDouble(),
                  max: duration.inSeconds.toDouble(),
                  onChanged: (value) {
                    setState(() {
                      widget._videoPlayerController.value = widget._videoPlayerController.value.copyWith(
                        position: Duration(seconds: value.toInt()),
                      );
                    });
                  },
                  onChangeEnd: (value) {
                    widget._videoPlayerController.seekTo(
                      Duration(seconds: value.toInt()),
                    );
                  },
                ),
              ),
            ),
            GestureDetector(
              behavior: HitTestBehavior.deferToChild,
              onTap: widget._toggleFullScreen,
              child: Icon(
                widget._isFullScreen ? Icons.fullscreen_exit : Icons.fullscreen,
                color: Colors.white,
                size: 30.0,
              ),
            ),
          ],
        ),
      ],
    );
  }
}

class TimeText extends StatefulWidget {
  final VideoPlayerController videoPlayerController;

  const TimeText(this.videoPlayerController, {Key? key}) : super(key: key);

  @override
  _TimeTextState createState() => _TimeTextState();
}

class _TimeTextState extends State<TimeText> {
  late VoidCallback listener;

  @override
  void initState() {
    super.initState();
    listener = () {
      setState(() {});
    };
    widget.videoPlayerController.addListener(listener);
  }

  @override
  void dispose() {
    widget.videoPlayerController.removeListener(listener);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final position = widget.videoPlayerController.value.position;
    final duration = widget.videoPlayerController.value.duration;
    final remaining = duration - position;

    return Row(
      children: [
        Text(
          _formatDuration(position),
          style: TextStyle(color: Colors.white.withOpacity(0.5)),
        ),
        const Spacer(),
        Text(
          _formatDuration(remaining),
          style: TextStyle(color: Colors.white.withOpacity(0.5)),
        ),
        const Icon(
          Icons.fullscreen,
          color: Colors.transparent,
          size: 30.0,
        ),
      ],
    );
  }

  String _formatDuration(Duration d) {
    final minutes = d.inMinutes.toString().padLeft(2, '0');
    final seconds = (d.inSeconds % 60).toString().padLeft(2, '0');
    return '$minutes:$seconds';
  }
}
